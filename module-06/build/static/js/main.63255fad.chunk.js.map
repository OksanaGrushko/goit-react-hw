{"version":3,"sources":["redux/contacts/contactsActions.js","components/Layout/Layout.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","contact","id","uuid","contactRemove","contactFilter","contactMassege","Layout","children","className","ContactForm","state","handlerInput","e","target","value","setState","handlerSubmit","preventDefault","props","contacts","onAddContact","onNameAlreadyExist","find","setTimeout","this","btnDisabled","length","onSubmit","onChange","type","disabled","Component","mapDispatchToProps","contactsActions","connect","items","ownProps","item","dispatch","removeButtonClick","onClick","normalizedFilter","filter","toLowerCase","includes","TransitionGroup","component","map","CSSTransition","timeout","classNames","onChangeFilter","onMassage","isNameAlreadyExist","nameAlreadyExist","in","appear","unmountOnExit","createReducer","action","vtf","console","log","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63255fad.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\nimport uuid from \"react-uuid\";\n\nconst addContact = createAction(\"contacts/add\", (name, number) => ({\n  payload: {\n    contact: { id: uuid(), name: name, number: number },\n  },\n}));\n\nconst contactRemove = createAction(\"contacts/remove\");\n\nconst contactFilter = createAction(\"contacts/contactFilter\");\n\nconst contactMassege = createAction(\"contacts/message\");\n\nexport default { addContact, contactRemove, contactFilter, contactMassege };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Layout = ({ children }) => <div className=\"Layout\">{children}</div>;\nexport default Layout;\n\nLayout.propTypes = {\n  children: PropTypes.array,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport contactsActions from \"../../redux/contacts/contactsActions\";\nimport \"./ContactForm.css\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handlerInput = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handlerSubmit = (e) => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const { contacts, onAddContact, onNameAlreadyExist } = this.props;\n    const isNameAlreadyExist = contacts.find(\n      (contact) => contact.name === name\n    );\n    if (isNameAlreadyExist) {\n      onNameAlreadyExist();\n      setTimeout(() => onNameAlreadyExist(), 1500);\n\n      return;\n    }\n    onAddContact(name, number);\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    const btnDisabled = (name.length && number.length) > 0;\n    return (\n      <form className=\"Contact-form\" onSubmit={this.handlerSubmit}>\n        <p className=\"Contact-text\">Name</p>\n        <input\n          className=\"Contact-input\"\n          value={name}\n          name=\"name\"\n          onChange={this.handlerInput}\n        />\n        <p className=\"Contact-text\">Number</p>\n        <input\n          className=\"Contact-input\"\n          value={number}\n          name=\"number\"\n          onChange={this.handlerInput}\n        />\n        <br />\n        <button\n          className=\"Contact-button\"\n          type=\"submit\"\n          disabled={!btnDisabled}\n        >\n          Add contacts\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onHendlerSubmit: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = {\n  onAddContact: contactsActions.addContact,\n  onNameAlreadyExist: contactsActions.contactMassege,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport \"./ContactListItem.css\";\nimport contactsActions from \"../../redux/contacts/contactsActions\";\n\nfunction ContactListItem({ name, number, id, removeButtonClick }) {\n  return (\n    <li className=\"ContactList-list\">\n      <p className=\"ContactList-inform\">{name}</p>\n      <p className=\"ContactList-inform\">{number}</p>\n      <button\n        className=\"ContactList-button\"\n        type=\"button\"\n        onClick={removeButtonClick}\n      >\n        X\n      </button>\n    </li>\n  );\n}\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  buttonClick: PropTypes.func,\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const item = state.contacts.items.find((item) => item.id === ownProps.id);\n  return {\n    ...item,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  removeButtonClick: () => dispatch(contactsActions.contactRemove(ownProps.id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\n","import React from \"react\";\nimport ContactListItem from \"../ContactListItem/ContactListItem\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport \"./ContactList.css\";\n\nfunction ContactList({ contacts }) {\n  return (\n    <TransitionGroup component=\"ul\" className=\"ContactList-ul\">\n      {contacts.map((contact) => {\n        return (\n          <CSSTransition\n            key={contact.id}\n            timeout={250}\n            classNames=\"ContactList-ul-fade\"\n          >\n            <ContactListItem id={contact.id} />\n          </CSSTransition>\n        );\n      })}\n    </TransitionGroup>\n  );\n}\n\nContactList.propTypes = {\n  filtredContacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  buttonClick: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => {\n  const { items, filter } = state.contacts;\n  const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = items.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return {\n    contacts: visibleContacts,\n  };\n};\n\nexport default connect(mapStateToProps)(ContactList);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/contacts/contactsActions\";\nimport PropTypes from \"prop-types\";\nimport \"./Filter.css\";\n\nconst Filter = ({ onChangeFilter, value }) => (\n  <div className=\"Filter-fon\">\n    <p className=\"Filter-name\">Find contacts by name</p>\n    <input\n      className=\"Filter-input\"\n      value={value}\n      type=\"text\"\n      name=\"filter\"\n      onChange={(e) => onChangeFilter(e.target.value)}\n    />\n  </div>\n);\n\nFilter.propTypes = {\n  onInputChange: PropTypes.func,\n  value: PropTypes.string,\n};\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  onChangeFilter: contactsActions.contactFilter,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../redux/contacts/contactsActions\";\r\nimport Layout from \"./Layout/Layout\";\r\nimport ContactForm from \"./ContactForm/ContactForm\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\nimport Filter from \"./Filter/Filter\";\r\nimport \"./styles.css\";\r\n\r\nfunction App({ isNameAlreadyExist }) {\r\n  return (\r\n    <Layout className=\"Layout\">\r\n      <CSSTransition\r\n        in={isNameAlreadyExist}\r\n        appear\r\n        classNames=\"InfoMessage-exist\"\r\n        timeout={250}\r\n        unmountOnExit\r\n      >\r\n        <p className=\"InfoMessage\">Contact already exists!</p>\r\n      </CSSTransition>\r\n      <CSSTransition\r\n        in={true}\r\n        appear={true}\r\n        timeout={250}\r\n        classNames=\"Title-animation\"\r\n        unmountOnExit\r\n      >\r\n        <h1 className=\"Title\">Phonebook</h1>\r\n      </CSSTransition>\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </Layout>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  isNameAlreadyExist: state.contacts.nameAlreadyExist,\r\n});\r\nconst mapDispatchToProps = {\r\n  onMassage: contactsActions.contactMassege,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport contactsActions from \"./contactsActions\";\n\nconst onAddContact = (state = [], action) => {\n  const vtf = state.find((item) => item.name === action.payload.contact.name);\n\n  console.log(\"state\", vtf);\n  if (vtf) {\n    console.log(\"werwer\", vtf);\n    contactsActions.contactMassege();\n    return;\n  }\n  return [...state, action.payload.contact];\n};\n\nconst onRemoveContact = (state, action) =>\n  state.filter((contact) => {\n    return contact.id !== action.payload;\n  });\n\nconst items = createReducer([], {\n  [contactsActions.addContact]: onAddContact,\n  [contactsActions.contactRemove]: onRemoveContact,\n});\n\nconst filter = createReducer(\"\", {\n  [contactsActions.contactFilter]: (state, action) => action.payload,\n});\n\nconst nameAlreadyExist = createReducer(false, {\n  [contactsActions.contactMassege]: (state, action) => !state,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  nameAlreadyExist,\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport contactsReducer from \"./contacts/contactsReducer\";\n\nconst store = configureStore({\n  reducer: { contacts: contactsReducer },\n});\nexport default store;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./components/App\";\r\nimport \"./base.css\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}