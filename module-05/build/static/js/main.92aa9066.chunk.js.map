{"version":3,"sources":["components/Layout/Layout.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","index.js"],"names":["Layout","children","className","ContactForm","state","name","number","handlerInput","e","target","value","setState","handlerSubmit","contact","id","uuid","this","btnDisabled","length","onSubmit","props","onChange","type","disabled","Component","ContactListItem","buttonClick","onClick","ContactList","filtredContacts","TransitionGroup","component","map","CSSTransition","timeout","classNames","Filter","onInputChange","App","contacts","filter","nameAlreadyExist","nameValidator","obj","find","addContact","preventDefault","console","log","prevState","setTimeout","contactDelete","newContact","persistedContact","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","toLowerCase","includes","in","appear","unmountOnExit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92aa9066.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Layout = ({ children }) => <div className=\"Layout\">{children}</div>;\nexport default Layout;\n\nLayout.propTypes = {\n  children: PropTypes.array,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport uuid from \"react-uuid\";\nimport \"./ContactForm.css\";\n\nexport default class ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handlerInput = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handlerSubmit = () => {\n    const { name, number } = this.state;\n    const contact = {\n      name: name,\n      id: uuid(),\n      number: number,\n    };\n    this.setState({ name: \"\", number: \"\" });\n\n    return contact;\n  };\n\n  render() {\n    const { name, number } = this.state;\n    const btnDisabled = (name.length && number.length) > 0;\n    return (\n      <form\n        className=\"Contact-form\"\n        onSubmit={(e) => this.props.handlerSubmit(e, this.handlerSubmit())}\n      >\n        <p className=\"Contact-text\">Name</p>\n        <input\n          className=\"Contact-input\"\n          value={name}\n          name=\"name\"\n          onChange={this.handlerInput}\n        />\n        <p className=\"Contact-text\">Number</p>\n        <input\n          className=\"Contact-input\"\n          value={number}\n          name=\"number\"\n          onChange={this.handlerInput}\n        />\n        <br />\n        <button\n          className=\"Contact-button\"\n          type=\"submit\"\n          disabled={!btnDisabled}\n        >\n          Add contacts\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onHendlerSubmit: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./ContactListItem.css\";\n\nexport default function ContactListItem({ name, number, id, buttonClick }) {\n  return (\n    <li className=\"ContactList-list\">\n      <p className=\"ContactList-inform\">{name}</p>\n      <p className=\"ContactList-inform\">{number}</p>\n      <button\n        className=\"ContactList-button\"\n        type=\"button\"\n        onClick={() => buttonClick(id)}\n      >\n        X\n      </button>\n    </li>\n  );\n}\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  buttonClick: PropTypes.func,\n};\n","import React from \"react\";\nimport ContactListItem from \"../ContactListItem/ContactListItem\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport \"./ContactList.css\";\n\nexport default function ContactList({ filtredContacts, buttonClick }) {\n  return (\n    <TransitionGroup component=\"ul\" className=\"ContactList-ul\">\n      {filtredContacts.map((contact) => {\n        return (\n          <CSSTransition\n            key={contact.id}\n            timeout={250}\n            classNames=\"ContactList-ul-fade\"\n          >\n            <ContactListItem\n              id={contact.id}\n              name={contact.name}\n              number={contact.number}\n              buttonClick={buttonClick}\n            ></ContactListItem>\n          </CSSTransition>\n        );\n      })}\n    </TransitionGroup>\n  );\n}\n\nContactList.propTypes = {\n  filtredContacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  buttonClick: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Filter.css\";\n\nexport default function Filter({ onInputChange, value }) {\n  return (\n    <div className=\"Filter-fon\">\n      <p className=\"Filter-name\">Find contacts by name</p>\n      <input\n        className=\"Filter-input\"\n        value={value}\n        type=\"text\"\n        name=\"filter\"\n        onChange={onInputChange}\n      />\n    </div>\n  );\n}\nFilter.propTypes = {\n  onInputChange: PropTypes.func,\n  value: PropTypes.string,\n};\n","import React, { Component } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport Layout from \"./Layout/Layout\";\r\nimport ContactForm from \"./ContactForm/ContactForm\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\nimport Filter from \"./Filter/Filter\";\r\nimport \"./styles.css\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: \"\",\r\n    nameAlreadyExist: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const persistedContact = localStorage.getItem(\"contacts\");\r\n    if (persistedContact) {\r\n      this.setState({\r\n        contacts: JSON.parse(persistedContact),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.contacts !== this.state.contacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n  handlerInput = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  nameValidator = (obj) => {\r\n    const { contacts } = this.state;\r\n    return contacts.find(({ name }) => name === obj.name);\r\n  };\r\n\r\n  addContact = (e, obj) => {\r\n    e.preventDefault();\r\n\r\n    if (!this.nameValidator(obj)) {\r\n      console.log(\"xxxxx\", this.nameValidator);\r\n      this.setState((prevState) => ({\r\n        contacts: [...prevState.contacts, obj],\r\n        filter: \"\",\r\n      }));\r\n      return;\r\n    }\r\n    this.setState({ nameAlreadyExist: true });\r\n    setTimeout(() => this.setState({ nameAlreadyExist: false }), 1500);\r\n  };\r\n\r\n  contactDelete = (id) => {\r\n    const { contacts } = this.state;\r\n    const newContact = contacts.filter((contact) => contact.id !== id);\r\n    this.setState({ contacts: newContact });\r\n  };\r\n\r\n  render() {\r\n    const { contacts, filter, nameAlreadyExist } = this.state;\r\n    const filtredContacts = contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter)\r\n    );\r\n    return (\r\n      <Layout className=\"Layout\">\r\n        <CSSTransition\r\n          in={nameAlreadyExist}\r\n          appear\r\n          classNames=\"InfoMessage-exist\"\r\n          timeout={250}\r\n          unmountOnExit\r\n        >\r\n          <p className=\"InfoMessage\">Contact already exists!</p>\r\n        </CSSTransition>\r\n\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          timeout={250}\r\n          classNames=\"Title-animation\"\r\n          unmountOnExit\r\n        >\r\n          <h1 className=\"Title\">Phonebook</h1>\r\n        </CSSTransition>\r\n\r\n        <ContactForm handlerSubmit={this.addContact} contacts={contacts} />\r\n        <CSSTransition\r\n          in={contacts.length > 1}\r\n          appear\r\n          timeout={250}\r\n          classNames=\"Filter\"\r\n          unmountOnExit\r\n        >\r\n          <Filter onInputChange={this.handlerInput} value={filter} />\r\n        </CSSTransition>\r\n        {contacts.length > 0 && (\r\n          <ContactList\r\n            filtredContacts={filtredContacts}\r\n            buttonClick={this.contactDelete}\r\n          />\r\n        )}\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./base.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}